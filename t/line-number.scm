(import (scheme base)
        (picrin port seek)
        (scheme write))

(define (count-lines str)
  (do ((lines 1)
       (newline (string-ref "\n" 0))
       (len (string-length str))
       (i 0 (+ i 1)))
      ((= i len) lines)
      (if (char=? (string-ref str i) newline)
          (set! lines (+ lines 1)))))

(define (read-line-number-literal c port)
  (if (port-seekable? port)
      (let ((current (port-current-seeker-position port))
            (buffer (make-string 10000)))
        (seek-port port 0) ; move seeker to head
        (do ((i 0 (+ i 1)))
            ((= i current))
          (string-set! buffer i (read-char port)))
        (count-lines buffer))
      0))

#;(set-dispatch-macro-character #\# #\l read-line-number-literal)
(define port (open-input-string "1\n2\n3\n4\n5\n6\n7\n"))
(write (read-line-number-literal #\c port))
(read-line port)
(write (read-line-number-literal #\c port))
(read-line port)
(write (read-line-number-literal #\c port))
(read-line port)
(write (read-line-number-literal #\c port))
(read-line port)
(write (read-line-number-literal #\c port))
(read-line port)
(write (read-line-number-literal #\c port))
